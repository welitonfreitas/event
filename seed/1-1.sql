
create type gender_type as ENUM ('male', 'female', 'other', 'mixed');
create type bloder_type as ENUM ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-');
CREATE TYPE difficulty_level AS ENUM ('beginner', 'intermediate', 'advanced');

create table public.profile (
    id uuid not null references auth.users on delete cascade,
    name character varying,
    cpf character varying,
    birth_date date,
    level difficulty_level not null default 'beginner',
    gender gender_type,
    blod_type bloder_type,
    address character varying,
    number character varying,
    complement character varying,
    neighborhood character varying,
    city character varying,
    state character varying,
    zip_code character varying,
    phone character varying,
    phone_emergency character varying,
    team character varying,
    created_at timestamp with time zone not null default now(),
    primary key (id)
);

alter table public.profile enable row level security;

-- inserts a row into public.profile
create function public.handle_new_user() 
returns trigger
language plpgsql 
security definer set search_path = '' 
as $$
begin
    insert into public.profile (id)
    values ( new.id);
    return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
    after insert on auth.users 
    for each row execute procedure public.handle_new_user();


CREATE TYPE event_status AS ENUM ('draft', 'published', 'canceled', 'finished', 'postponed');

CREATE TABLE event (
    id bigint generated by default as identity,
    status event_status not null default 'draft',
    created_at timestamp with time zone not null default now(),
    title character varying null,
    description character varying null,
    event_date timestamp with time zone null,
    address_short character varying null,
    address_full character varying null,
    banner_url character varying null,
    sponsors jsonb null,
    extras jsonb null,
    user_id uuid not null,
    constraint event_pkey primary key (id),
    constraint public_event_user_id_fkey foreign key (user_id) references auth.users (id)
);

create type subscriptions_status as ENUM ('pending', 'approved', 'rejected', 'canceled');

CREATE TABLE subscriptions (
    id bigint generated by default as identity
        constraint subscriptions_pkey
            primary key,
    created_at timestamp with time zone not null default now(),
    profile_id uuid not null,
    lot_id bigint not null,
    category_id bigint not null,
    event_id bigint not null,
    filename character varying null,
    status subscriptions_status not null default 'pending',
    constraint subscriptions_lot_id_fkey
        foreign key (lot_id)
            references lots (id),
    constraint subscriptions_profile_id_fkey
        foreign key (profile_id)
            references public.profile (id),
    constraint subscriptions_category_id_fkey
        foreign key (category_id)
            references category (id),
    constraint subscriptions_event_id_fkey
        foreign key (event_id)
            references event (id)

);

CREATE TABLE category (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    description TEXT,
    minimum_age INT,
    maximum_age INT,
    gender gender_type,
    difficulty_level difficulty_level,
    is_oficial BOOLEAN
);

CREATE TABLE event_category (
    event_id bigint not null,
    category_id bigint not null,
    primary key (event_id, category_id)
    constraint event_category_category_id_fkey foreign key (category_id) references category (id),
    constraint event_category_event_id_fkey foreign key (event_id) references event (id)
);

CREATE TYPE lots_status AS ENUM ('Aberto', 'Fechado', 'Cancelado', 'Esgotado');

CREATE TABLE lots (
    id bigint generated by default as identity constraint lots_pkey primary key,
    created_at timestamp with time zone not null default now(),
    title character varying null,
    status lots_status not null default 'Aberto',
    description character varying null,
    start_date timestamp with time zone null,
    end_date timestamp with time zone null,
    price numeric null,
    quantity integer null,
    event_id bigint not null,
    constraint lots_event_id_fkey foreign key (event_id) references event (id)
);


insert into category 
    (description, minimum_age, maximum_age, gender, difficulty_level, is_oficial) 
values 
    ( 'Elite Feminino (idade livre)', 0, 100, 'female', 'advanced', true),
    ( 'Amador Feminino (idade livre)', 0, 100, 'female', 'intermediate', false),
    ( 'Master Feminino (30 anos acima)', 30, 100, 'female', 'intermediate', true),
    ( 'Elite Masculino (idade livre)', 0, 100, 'male', 'advanced', true),
    ( 'Junior (15 a 18 anos)', 15, 18, 'male', 'advanced', true),
    ( 'Sub 23 (19 a 22 anos)', 19, 22, 'male', 'advanced', true),
    ( 'Sub 30 (23 a 29 anos)', 23, 29, 'male', 'advanced', true),
    ( 'Master A1 (30 a 34 anos)', 30, 34, 'male', 'advanced', true),
    ( 'Master A2 (35 a 39 anos)', 35, 39, 'male', 'advanced', true),
    ( 'Master B1 (40 a 44 anos)', 40, 44, 'male', 'advanced', true),
    ( 'Master B2 (45 a 49 anos)', 45, 49, 'male', 'advanced', true),
    ( 'Master C1 (50 a 54 anos)', 50, 54, 'male', 'advanced', true),
    ( 'Master C2 (55 a 59 anos)', 55, 59, 'male', 'advanced', true),
    ( 'Master D (60 anos acima)', 60, 100, 'male', 'advanced', true),
    ( 'Amador Cadete (At√© 29 anos)', 0, 20, 'male', 'intermediate', false),
    ( 'Amador A (30 a 39 anos)', 30, 39, 'male', 'intermediate', false),
    ( 'Amador B ( 40 anos acima)', 40, 100, 'male', 'intermediate', false),
    ( 'Dupla Mista (idade livre)', 0, 100, 'mixed', 'intermediate', false),
    ( 'Nelore (100 Kg acima)', 0, 100, 'male', 'intermediate', false),
    ( 'PCD (idade livre)', 0, 100, 'male', 'intermediate', false),
    ( 'E-bike 350w (idade livre)', 0, 100, 'male', 'intermediate', false),
    ( 'E-bike 500w (idade livre)', 0, 100, 'male', 'intermediate', false);